plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

ext {
    //Version format: [___][__][_][____]
    versionMajor = 1//Max characters: 3
    versionMinor = 0//Max characters: 2
    versionPatch = 0//Max characters: 1

    junit = "4.13.2"
    androidxjunit = "1.1.3"
    espresso = "3.4.0"
    dexmakerMockito = "2.28.1"
    mockitoCore = "3.4.2"
    mockitoAndroid = "4.7.0"
    mockWebServer = "3.6.0"

    multidex = "2.0.1"

    ktx = "1.8.0"
    appcompat = "1.4.1"
    material ="1.6.1"

    dagger = "2.43.2"

    glide = "4.13.2"

    okHttp3LoggingInterceptor = "3.6.0"

    retrofit = "2.9.0"

    rxJava = "2.1.7"
    rxAndroid = "2.0.2"

    timber = "5.0.1"
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "me.sambains.androidapisample"
        minSdk 23
        targetSdk 31
        versionCode 1
        versionName "1.0"

        multiDexEnabled true

        testInstrumentationRunner "me.sambains.androidapisample.core.EspressoTestRunner"
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled false
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        buildTypes.each {
            it.buildConfigField("String", "BASE_URL", getKeyProperty("baseUrl"))
            it.buildConfigField("String", "API_KEY", getKeyProperty("apiKey"))
            it.buildConfigField("String", "BACKDROP_IMAGE_URL", getKeyProperty("backdropImageUrl"))
            it.buildConfigField("String", "POSTER_IMAGE_URL", getKeyProperty("posterImageUrl"))
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    androidTestImplementation "androidx.test.ext:junit:${androidxjunit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${espresso}"
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito:${dexmakerMockito}"
    androidTestImplementation "org.mockito:mockito-core:${mockitoCore}"
    //androidTestImplementation("org.mockito:mockito-android:${mockitoAndroid}")
    androidTestImplementation "androidx.core:core-ktx:${ktx}"
    androidTestImplementation "com.google.dagger:dagger:${dagger}"
    kaptAndroidTest "com.google.dagger:dagger-compiler:${dagger}"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${mockWebServer}"

    testImplementation "junit:junit:${junit}"
    testImplementation "org.mockito:mockito-core:${mockitoCore}"

    implementation "androidx.multidex:multidex:${multidex}"

    implementation "androidx.core:core-ktx:${ktx}"
    implementation "androidx.appcompat:appcompat:${appcompat}"
    implementation "com.google.android.material:material:${material}"

    implementation "com.google.dagger:dagger:${dagger}"
    kapt "com.google.dagger:dagger-compiler:${dagger}"

    implementation "com.github.bumptech.glide:glide:${glide}"

    implementation "com.squareup.okhttp3:logging-interceptor:${okHttp3LoggingInterceptor}"

    implementation "com.squareup.retrofit2:retrofit:${retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofit}"

    implementation "io.reactivex.rxjava2:rxjava:${rxJava}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxAndroid}"

    implementation "com.jakewharton.timber:timber:${timber}"
}

def getKeyProperty(String property) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(file(new File("keys.properties"))))
    return properties[property]
}